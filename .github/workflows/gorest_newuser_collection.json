{
	"info": {
		"_postman_id": "5fb23b70-e0dd-439c-a2c5-f48573a16bf4",
		"name": "GoREST: new user post",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19055830"
	},
	"item": [
		{
			"name": "create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"responseJson = pm.response.json();",
							"",
							"if (pm.response.code == 201) {",
							"    ",
							"    pm.collectionVariables.set(\"userId\", responseJson.id);",
							"",
							"    pm.test(\"Status code is 201\", function () {",
							"        pm.response.to.have.status(201);",
							"        });",
							"",
							"    pm.test(\"User created successfully with userId =\" + pm.collectionVariables.get('userId') , function () {",
							"        pm.expect(responseJson.id).not.to.be.null",
							"        });",
							"",
							"    postman.setNextRequest(\"get user by id\");",
							"",
							"}",
							"",
							"else {",
							"        postman.setNextRequest(null);",
							"",
							"};",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\",\n    \"gender\": \"{{gender}}\",\n    \"email\": \"{{email_prefix}}.{{$randomInt}}@test.com\",\n    \"status\": \"{{status}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Handles errors",
							"if (pm.response.code == 200) {",
							"",
							"    pm.test(\"userID is correct\", function () {",
							"    pm.expect(pm.response.json().id).to.eql(pm.collectionVariables.get(\"userId\"))",
							"    });",
							"",
							"    pm.test(\"User name is not empty\", function () {",
							"    pm.expect(pm.response.json().name).to.not.be.empty",
							"    });",
							"",
							"    pm.test(\"User email is not empty\", function () {",
							"        pm.expect(pm.response.json().email).to.not.be.empty",
							"    });",
							"    ",
							"    pm.test(\"User is active\", function () {",
							"    pm.expect(pm.response.json().status).to.be.eql('active')",
							"    });",
							"",
							"    postman.setNextRequest(\"delete user by id\");",
							"}",
							"",
							"else if (pm.response.code == 404) {",
							"    pm.test(\"User not found as expected result for none existing users\", function () {",
							"    });",
							"",
							"    postman.setNextRequest(null);",
							"}",
							"",
							"else {",
							"    pm.test(\"Unexpected response code\", function () {",
							"        throw new Error(\"Unexpected response code: \" + pm.response.code);",
							"    });",
							"",
							"};",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\",\n    \"gender\": \"{{gender}}\",\n    \"email\": \"{{email_prefix}}.{{$randomInt}}@test.com\",\n    \"status\": \"{{status}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "authToken",
			"value": "a5bdcd1d2b2ba623069471443142e4394ab17940489ac9eb56f96094de3896a5"
		},
		{
			"key": "baseUrl",
			"value": "https://gorest.co.in/public/v2"
		},
		{
			"key": "userId",
			"value": ""
		}
	]
}